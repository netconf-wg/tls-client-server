<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     consensus="true"
     docName="draft-ietf-netconf-tls-client-server-latest"
     ipr="trust200902">
  <front>
    <title abbrev="Groupings for TLS Clients and Servers">YANG Groupings for
      TLS Clients and TLS Servers</title>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date/>
    <area>Operations</area>
    <workgroup>NETCONF Working Group</workgroup>
    <abstract>
      <t>This document defines three YANG 1.1
        modules: the first defines features and groupings common to both TLS
        clients and TLS servers, the second defines a grouping for a generic
        TLS client, and the third defines a grouping for a generic TLS server.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication. This note summarizes
        all of the substitutions that are needed. No other RFC Editor
        instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in
        progress.  Please apply the following replacements:
        <list style="symbols">
          <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
          <t><spanx style="verb">BBBB</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-trust-anchors</t>
          <t><spanx style="verb">CCCC</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-keystore</t>
          <t><spanx style="verb">DDDD</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client-server</t>
          <t><spanx style="verb">FFFF</spanx> --&gt; the assigned RFC value for this draft</t>
        </list>
      </t>
      <t>Artwork in this document contains placeholder values for the date of
        publication of this draft. Please apply the following replacement:
        <list style="symbols">
          <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
        </list>
      </t>
      <t>The "Relation to other RFCs" section <xref target="collective-effort"/> contains
        the text "one or more YANG modules" and, later, "modules".  This text is sourced
        from a file in a context where it is unknown how many modules a draft defines.
        The text is not wrong as is, but it may be improved by stating more directly how
        many modules are defined.</t>
      <t>The "Relation to other RFCs" section <xref target="collective-effort"/> contains
        a self-reference to this draft, along with a corresponding Informative Reference in
        the Appendix.</t>
      <t>The following Appendix section is to be removed prior to publication:
        <list style="symbols">
          <t><xref target="change-log"/>.  Change Log</t>
        </list>
      </t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document defines three YANG 1.1 <xref target="RFC7950"/>
        modules: the first defines features and groupings common to both TLS
        clients and TLS servers, the second defines a grouping for a generic
        TLS client, and the third defines a grouping for a generic TLS server.</t>

      <t>Any version of TLS may be configured.  TLS 1.0 <xref target="RFC2246"/>
        and TLS 1.1 <xref target="RFC4346"/> are historic and hence the YANG
        "feature" statements enabling them are marked "status obsolete".  TLS 1.2
        <xref target="RFC5246"/> is obsoleted by TLS 1.3 <xref target="RFC8446"/>
        but still in common use, and hence its "feature" statement is marked
        "status deprecated".  All the feature statements for 1.0, 1.1, and 1.3
        have "description" statements stating that it is NOT RECOMMENDED to
        enable obsolete protocol versions.</t>

      <t>It is intended that the YANG groupings will be used by applications
        needing to configure TLS client and server protocol stacks.  For
        instance, these groupings are used to help define the data model
        for HTTPS <xref target="RFC2818"/> and NETCONF over TLS
        <xref target="RFC7589"/> based clients and servers in <xref target="I-D.ietf-netconf-http-client-server"/>
        and <xref target="I-D.ietf-netconf-netconf-client-server"/> respectively.</t>

      <t>The client and server YANG modules in this document each define one
      grouping, which is focused on just TLS-specific configuration, and
      specifically avoids any transport-level configuration, such as what
      ports to listen-on or connect-to. This affords applications the
      opportunity to define their own strategy for how the underlying TCP
      connection is established. For instance, applications supporting NETCONF
      Call Home <xref target="RFC8071"/> could use the "tls-server-grouping"
      grouping for the TLS parts it provides, while adding data nodes for the
      TCP-level call-home configuration.</t>

INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

      <section title="Adherence to the NMDA">
        <t>This document is compliant with the Network Management Datastore 
          Architecture (NMDA) <xref target="RFC8342"/>.  For instance, as 
          described in <xref target="I-D.ietf-netconf-trust-anchors"/> and
          <xref target="I-D.ietf-netconf-keystore"/>, trust anchors and keys
          installed during manufacturing are expected to appear
          in &lt;operational&gt;.</t>
      </section>

        <section title="Conventions">
          <t>Various examples used in this document use a placeholder
            value for binary data that has been base64 encoded (e.g.,
            "BASE64VALUE=").  This placeholder value is used as real
            base64 encoded structures are often many lines long and
            hence distracting to the example being presented.</t>
        </section>

    </section>

    <section anchor="tls-common-model" title="The &quot;ietf-tls-common&quot; Module">
      <t>The TLS common model presented in this section contains features
      and groupings common to both TLS clients and TLS servers. The
      "hello-params-grouping" grouping can be used to configure the list of TLS
      algorithms permitted by the TLS client or TLS server. The lists of
      algorithms are ordered such that, if multiple algorithms are permitted
      by the client, the algorithm that appears first in its list that is also
      permitted by the server is used for the TLS transport layer connection.
      The ability to restrict the algorithms allowed is provided in this
      grouping for TLS clients and TLS servers that are capable of doing so
      and may serve to make TLS clients and TLS servers compliant with local
      security policies. This model supports both TLS 1.2 <xref
      target="RFC5246"/> and TLS 1.3 <xref target="RFC8446"/>.</t>

    <!--
      <t>TLS 1.2 and TLS 1.3 have different ways defining their own supported
      cryptographic algorithms, see TLS and DTLS IANA registries page
      (https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml):</t>

      <t><list style="symbols">
          <t>TLS 1.2 defines four categories of registries for cryptographic
          algorithms: TLS Cipher Suites, TLS SignatureAlgorithm, TLS
          HashAlgorithm, TLS Supported Groups. TLS Cipher Suites plays the
          role of combining all of them into one set, as each value of the set
          represents a unique and feasible combination of all the
          cryptographic algorithms, and thus the other three registry
          categories do not need to be considered here. In this document, the
          TLS common model only chooses those TLS1.2 algorithms in TLS Cipher
          Suites which are marked as recommended:
          TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
          TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
          TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,
          TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, and so on. All chosen
          algorithms are enumerated in Table 1-1 below;</t>

          <t>TLS 1.3 defines its supported algorithms differently. Firstly, it
          defines three categories of registries for cryptographic algorithms:
          TLS Cipher Suites, TLS SignatureScheme, TLS Supported Groups.
          Secondly, all three of these categories are useful, since they
          represent different parts of all the supported algorithms
          respectively. Thus, all of these registries categories are
          considered here. In this draft, the TLS common model chooses only
          those TLS1.3 algorithms specified in B.4, 4.2.3, 4.2.7 of <xref
          target="RFC8446"/>.</t>
        </list></t>
     -->

      <!-- FIXME - is there an open item below? -->
      <t>Thus, in order to support both TLS1.2 and TLS1.3, the cipher-suites
      part of the "hello-params-grouping" grouping should include three parameters for
      configuring its permitted TLS algorithms, which are: TLS Cipher Suites,
      TLS SignatureScheme, TLS Supported Groups. Note that TLS1.2 only uses
      TLS Cipher Suites.</t>

    <!--
      <t>Features are defined for algorithms that are OPTIONAL or are not
      widely supported by popular implementations. Note that the list of
      algorithms is not exhaustive.</t>
     -->

      <section title="Data Model Overview">

       <t>This section provides an overview of the "ietf-tls-common" module
          in terms of its features, identities, and groupings.</t>

        <section title="Features" anchor="common-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tls-common" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- tls10
  +-- tls11
  +-- tls12
  +-- tls13
  +-- hello-params
  +-- public-key-generation
]]></artwork>
            </figure>
          </t>
          <!--<aside>-->
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          <!--</aside>-->
        </section>

        <section title="Identities" anchor="identities" toc="exclude">
          <t>The following diagram illustrates the relationship amongst the
            "identity" statements defined in the "ietf-tls-common" module:</t>
          <t>
            <figure>
             <artwork><![CDATA[
Identities:               
  +-- tls-version-base
     +-- tls10
     +-- tls11
     +-- tls12
     +-- tls13
]]></artwork>
            </figure>
          </t>
          <!--<aside>-->
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          <!--</aside>-->
          <t>Comments:</t>
          <ul spacing="compact">
            <li>The diagram shows that there are two base identities.</li>
            <li>One base identity is used to specific TLS versions, while
              the other is used to specify cipher-suites.</li>
            <li>These base identities are "abstract", in the object oriented
              programming sense, in that they only define a "class" of things,
              rather than a specific thing.</li>
          </ul>
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tls-common" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>hello-params-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;hello-params-grouping&quot; Grouping" anchor="hello-params-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "hello-params-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-hello-params-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>This grouping is used by both the "tls-client-grouping" and the
                "tls-server-grouping" groupings defined in <xref target="tls-client-grouping"/> 
                and <xref target="tls-server-grouping"/>, respectively.</li>
              <li>This grouping enables client and server configurations to
                specify the TLS versions and cipher suites that are to be used
                when establishing TLS sessions.</li>
              <li>The "cipher-suites" list is "ordered-by user".</li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The following tree diagram <xref target="RFC8340"/> lists all the
            protocol-accessible nodes defined in the "ietf-tls-common" module,
            without expanding the "grouping" statements:</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-tls-common-tree-no-expand.txt)
]]></artwork>
            </figure>
          </t>
          <t>The following tree diagram <xref target="RFC8340"/> lists all the
            protocol-accessible nodes defined in the "ietf-tls-common" module,
            with all "grouping" statements expanded, enabling the module's full
            structure to be seen:</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-tls-common-tree.txt)
]]></artwork>
            </figure>
          </t>
          <t>Comments:</t>
          <ul>
            <li>Protocol-accessible nodes are those nodes that are accessible
              when the module is "implemented", as described in <relref
              section="5.6.5" target="RFC7950"/>.</li>
            <li>The protocol-accessible nodes for the "ietf-tls-common" module
              are limited to the RPC "generate-public-key", which is
              additionally constrained by the feature "public-key-generation".</li>
            <li>The "encrypted-by-choice-grouping" grouping is discussed in
              <relref section="2.1.3.1" target="I-D.ietf-netconf-keystore"/>.</li>
            <li>The "asymmetric-key-pair-grouping" grouping is discussed in
              <relref section="2.1.4.5" target="I-D.ietf-netconf-crypto-types"/>.</li>
          </ul>
        </section>

      </section>

      <section title="Example Usage">
        <t>The following example illustrates the "hello-params-grouping'
          grouping when populated with some data.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-common.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following example illustrates the "generate-public-key" RPC.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-generate-public-key.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="tls-common-yang-module" title="YANG Module">
        <t>This YANG module has a normative references to <xref target="RFC4346"/>,
          <xref target="RFC5288"/>, <xref target="RFC5289"/>, <xref target="RFC8422"/>,
          and FIPS PUB 180-4.</t>

        <t>This YANG module has a informative references to
          <xref target="RFC2246"/>, <xref target="RFC4346"/>,
          <xref target="RFC5246"/>, and <xref target="RFC8446"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tls-common@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tls-common@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="tls-client-model" title="The &quot;ietf-tls-client&quot; Module">

      <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
        "ietf-tls-client".  A high-level overview of the module is provided in
        <xref target="client-overview"/>. Examples illustrating the module's use
        are provided in <xref target="client-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="client-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="client-overview">

       <t>This section provides an overview of the "ietf-tls-client" module
          in terms of its features and groupings.</t>

        <section title="Features" anchor="client-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tls-client" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- tls-client-keepalives
  +-- client-ident-x509-cert
  +-- client-ident-raw-public-key
  +-- client-ident-psk
  +-- server-auth-x509-cert
  +-- server-auth-raw-public-key
  +-- server-auth-psk
]]></artwork>
            </figure>
          </t>
          <!--<aside>-->
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          <!--</aside>-->
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tls-client" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>tls-client-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;tls-client-grouping&quot; Grouping" anchor="tls-client-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "tls-client-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-tls-client-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "client-identity" node, which is optionally configured (as client
                authentication MAY occur at a higher protocol layer), configures
                identity credentials, each enabled by a "feature" statement defined in
                <xref target="client-features"/>.</li>
              <li>The "server-authentication" node configures trust anchors for
                authenticating the TLS server, with each option enabled by a "feature" statement.</li>
              <li>The "hello-params" node, which must be enabled by a feature, configures
                parameters for the TLS sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a "presence" container for testing the aliveness of the TLS server.  The
                aliveness-test occurs at the TLS protocol layer.</li>
              <li>For the referenced grouping statement(s):
                <ul spacing="compact">
                  <li>The "local-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <relref section="2.1.3.6" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.4" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-symmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.3" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-truststore-certs-grouping" grouping is
                    discussed in <relref section="2.1.3.1" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "local-or-truststore-public-keys-grouping" grouping is
                    discussed in <relref section="2.1.3.2" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "hello-params-grouping" grouping is discussed in 
                  <xref target="hello-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-tls-client" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.</t>
        </section>

      </section>

      <section title="Example Usage" anchor="client-examples">
        <t>This section presents two examples showing the "tls-client-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the client identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following configuration example uses local-definitions for the
          client identity and server authentication:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-client-local.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following configuration example uses keystore-references for the
          client identity and truststore-references for server authentication:
          from the keystore:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-client-keystore.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="client-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref target="I-D.ietf-netconf-trust-anchors"/>
          and <xref target="I-D.ietf-netconf-keystore"/>, and Informative references to
          <xref target="RFC5246"/>, <xref target="RFC8446"/>, <xref target="I-D.ietf-tls-external-psk-importer"/> and
          <xref target="I-D.ietf-tls-external-psk-guidance"/>.</t>

        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tls-client@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tls-client@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="tls-server-model" title="The &quot;ietf-tls-server&quot; Module">

      <t>This section defines a YANG 1.1 module called
        "ietf-tls-server".  A high-level overview of the module is provided in
        <xref target="server-overview"/>. Examples illustrating the module's use
        are provided in <xref target="server-examples">Examples</xref>. The YANG
        module itself is defined in <xref target="server-yang-module"/>.</t>

      <section title="Data Model Overview" anchor="server-overview">

       <t>This section provides an overview of the "ietf-tls-server" module
          in terms of its features and groupings.</t>

        <section title="Features" anchor="server-features" toc="exclude">
          <t>The following diagram lists all the "feature" statements
            defined in the "ietf-tls-server" module:</t>
          <t>
            <figure>
              <artwork><![CDATA[
Features:
  +-- tls-server-keepalives
  +-- server-ident-x509-cert
  +-- server-ident-raw-public-key
  +-- server-ident-psk
  +-- client-auth-supported
  +-- client-auth-x509-cert
  +-- client-auth-raw-public-key
  +-- client-auth-psk
]]></artwork>
            </figure>
          </t>
          <!--<aside>-->
            <t>The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340"/>.</t>
          <!--</aside>-->
        </section>

        <section title="Groupings" toc="exclude">
          <t>The "ietf-tls-server" module defines the following "grouping" statement:</t>
          <ul spacing="compact">
            <li>tls-server-grouping</li>
          </ul>
          <t>This grouping is presented in the following subsection.</t>

          <section title="The &quot;tls-server-grouping&quot; Grouping" anchor="tls-server-grouping">
            <t>The following tree diagram <xref target="RFC8340"/> illustrates the
              "tls-server-grouping" grouping:</t>
            <t>
              <figure>
               <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-tls-server-grouping.no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>The "server-identity" node configures identity credentials, each of
                which is enabled by a "feature".</li>
              <li>The "client-authentication" node, which is optionally configured (as client
                authentication MAY occur at a higher protocol layer), configures trust
                anchors for authenticating the TLS client, with each option enabled
                by a "feature" statement.</li>
              <li>The "hello-params" node, which must be enabled by a feature, configures
                parameters for the TLS sessions established by this configuration.</li>
              <li>The "keepalives" node, which must be enabled by a feature, configures
                a flag enabling the TLS client to test the aliveness of the TLS server,
                as well as a "presence" container for testing the aliveness of the TLSi
                client.  The aliveness-tests occurs at the TLS protocol layer.</li>
              <li>For the referenced grouping statement(s):
                <ul spacing="compact">
                  <li>The "local-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <relref section="2.1.3.6" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.4" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-keystore-symmetric-key-grouping" grouping is
                    discussed in <relref section="2.1.3.3" target="I-D.ietf-netconf-keystore"/>.</li>
                  <li>The "local-or-truststore-public-keys-grouping" grouping is
                    discussed in <relref section="2.1.3.2" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "local-or-truststore-certs-grouping" grouping is
                    discussed in <relref section="2.1.3.1" target="I-D.ietf-netconf-trust-anchors"/>.</li>
                  <li>The "hello-params-grouping" grouping is discussed in
                  <xref target="hello-params-grouping"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>

        <section title="Protocol-accessible Nodes" toc="exclude">
          <t>The "ietf-tls-server" module defines only "grouping" statements that are
            used by other modules to instantiate protocol-accessible nodes.</t>
        </section>

      </section>

      <section title="Example Usage" anchor="server-examples">
        <t>This section presents two examples showing the "tls-server-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the server identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in Section 2 of <xref
        target="I-D.ietf-netconf-trust-anchors"/> and Section 3.2 of <xref
        target="I-D.ietf-netconf-keystore"/>.</t>

        <t>The following configuration example uses local-definitions for the
          server identity and client authentication:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-server-local.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following configuration example uses keystore-references for the
          server identity and truststore-references for client authentication:
          from the keystore:
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-server-keystore.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section anchor="server-yang-module" title="YANG Module">
        <t>This YANG module has normative references to <xref target="I-D.ietf-netconf-trust-anchors"/>
          and <xref target="I-D.ietf-netconf-keystore"/>, and Informative references to
          <xref target="RFC5246"/>, <xref target="RFC8446"/>, <xref target="I-D.ietf-tls-external-psk-importer"/> and
          <xref target="I-D.ietf-tls-external-psk-guidance"/>.</t>
        <t>
          <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-tls-server@YYYY-MM-DD.yang"</preamble>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-tls-server@YYYY-MM-DD.yang)
]]></artwork>
            <postamble>&lt;CODE ENDS&gt;</postamble>
          </figure>
        </t>
      </section>
    </section>

    <section title="Security Considerations">
      <section title='The "iana-tls-cipher-suite-algs" Module'>
        <t>The "iana-tls-cipher-suite-algs" YANG module defines a data model
          that is designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>
        <t>The Network Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>
        <t>This YANG module defines YANG identities, for a public IANA-maintained
          registry, and a single protocol-accessible read-only node for the subset
          of those identities supported by a server.</t>
        <t>YANG identities are not security-sensitive, as they are statically
          defined in the publicly-accessible YANG module.</t>
        <t>The protocol-accessible read-only node for the algorithms supported
          by a server is mildly sensitive, but not to the extent that special
          NACM annotations are needed to prevent read-access to regular
          authenticated administrators.</t>
        <t>This module does not define any writable-nodes, RPCs, actions,
          or notifications, and thus the security consideration for such
          is not provided here.</t>
      </section>

      <section title="The &quot;ietf-tls-common&quot; YANG Module">
        <t>The "ietf-tls-common" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The Network Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>

        <t>None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>

      <section title="The &quot;ietf-tls-client&quot; YANG Module">
        <t>The "ietf-tls-client" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The Network Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module
          are considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for any
          data nodes defined in this module.</t>

        <!--<aside>-->
          <t>Please be aware that this module uses the "key" and "private-key"
            nodes from the "ietf-crypto-types" module <xref target="I-D.ietf-netconf-crypto-types"/>,
            where said nodes have the NACM extension "default-deny-all" set, thus
            preventing unrestricted read-access to the cleartext key values.</t>
        <!--</aside>-->

        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>

      <section title="The &quot;ietf-tls-server&quot; YANG Module">
        <t>The "ietf-tls-server" YANG module defines "grouping" statements
          that are designed to be accessed via YANG based management
          protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
          <xref target="RFC8040"/>.  Both of these protocols have
          mandatory-to-implement secure transport layers (e.g., SSH, TLS)
          with mutual authentication.</t>

        <t>The Network Access Control Model (NACM) <xref target="RFC8341"/>
          provides the means to restrict access for particular users to a
          pre-configured subset of all available protocol operations and
          content.</t>

        <t>Since the module in this document only define groupings,
          these considerations are primarily for the designers of other
          modules that use these groupings.</t>

        <t>None of the readable data nodes defined in this YANG module are considered sensitive
          or vulnerable in network environments. The NACM "default-deny-all" extension
          has not been set for any data nodes defined in this module.</t>

        <!--<aside>-->
          <t>Please be aware that this module uses the "key" and "private-key"
            nodes from the "ietf-crypto-types" module <xref target="I-D.ietf-netconf-crypto-types"/>,
            where said nodes have the NACM extension "default-deny-all" set, thus
            preventing unrestricted read-access to the cleartext key values.</t>
        <!--</aside>-->

        <t>All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>

        <t>This module does not define any RPCs, actions, or notifications,
          and thus the security consideration for such is not provided here.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <section title='The "IETF XML" Registry'>
        <t>This document registers four URIs in the "ns" subregistry of the
        IETF XML Registry <xref target="RFC3688"/>. Following the format in
        <xref target="RFC3688"/>, the following registrations are
        requested:</t>

        <t><figure>
            <artwork>
URI: urn:ietf:params:xml:ns:yang:iana-tls-cipher-suite-algs
Registrant Contact: IANA
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-tls-common
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-tls-client
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-tls-server
Registrant Contact: The IESG
XML: N/A, the requested URI is an XML namespace.
</artwork>
          </figure></t>
      </section>

      <section title='The "YANG Module Names" Registry'>
        <t>This document registers four YANG modules in the YANG Module Names
        registry <xref target="RFC6020"/>. Following the format in <xref
        target="RFC6020"/>, the following registrations are requested:</t>

        <t><figure>
            <artwork>
name:         iana-tls-cipher-suite-algs
namespace:    urn:ietf:params:xml:ns:yang:iana-tls-cipher-suite-algs
prefix:       tlscsa
reference:    RFC FFFF

name:         ietf-tls-common
namespace:    urn:ietf:params:xml:ns:yang:ietf-tls-common
prefix:       tlscmn
reference:    RFC FFFF

name:         ietf-tls-client
namespace:    urn:ietf:params:xml:ns:yang:ietf-tls-client
prefix:       tlsc
reference:    RFC FFFF

name:         ietf-tls-server
namespace:    urn:ietf:params:xml:ns:yang:ietf-tls-server
prefix:       tlss
reference:    RFC FFFF
</artwork>
          </figure></t>
      </section>

      <section title='The "iana-tls-cipher-suite-algs" Module'>
        <t>IANA is requested to maintain a YANG module called "iana-tls-cipher-suite-algs"
          that shadows the "TLS Cipher Suites" sub-registry of the
          "Transport Layer Security (TLS) Parameters" registry <xref target="IANA-CIPHER-ALGS"/>.</t>
        <t>This registry defines a YANG identity for each cipher suite algorithm, and a "base"
          identity from which all of the other identities are derived.  Identities are chosen
          over enumerations for extensibility reasons.</t>
        <t>An initial version of this module can be found in <xref target="iana-tls-csa-module"/>.</t>
        <ul>
          <li>Please note that this module was created on June 16th, 2022, and that additional
            entries may have been added in the interim before this document's publication.
            If this is that case, IANA may either publish just an updated module containing
            the new entries, or publish the initial module as is immediately followed by a
            "revision" containing the additional algorithm names.</li>
          <li>Please also note that the "status" statement has been set to "deprecated", if the
            "RECOMMENDED" column in the registry had the value 'N', and to "obsolete", if
            the "References" column included <eref target="https://datatracker.ietf.org/doc/status-change-tls-des-idea-ciphers-to-historic">Moving single-DES and IDEA TLS ciphersuites to Historic</eref> reference.</li>
        </ul>
      </section>

    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.2712.xml"?>
      <?rfc include="reference.RFC.4162.xml"?>
      <?rfc include="reference.RFC.4279.xml"?>
      <?rfc include="reference.RFC.4785.xml"?>
      <?rfc include="reference.RFC.5054.xml"?>
      <?rfc include="reference.RFC.5288.xml"?>
      <?rfc include="reference.RFC.5289.xml"?>
      <?rfc include="reference.RFC.5469.xml"?>
      <?rfc include="reference.RFC.5487.xml"?>
      <?rfc include="reference.RFC.5489.xml"?>
      <?rfc include="reference.RFC.5746.xml"?>
      <?rfc include="reference.RFC.5932.xml"?>
      <?rfc include="reference.RFC.6020.xml"?>
      <?rfc include="reference.RFC.6209.xml"?>
      <?rfc include="reference.RFC.6367.xml"?>
      <?rfc include="reference.RFC.6655.xml"?>
      <?rfc include="reference.RFC.7251.xml"?>
      <?rfc include="reference.RFC.7507.xml"?>
      <?rfc include="reference.RFC.7589.xml"?>
      <?rfc include="reference.RFC.7905.xml"?>
      <?rfc include="reference.RFC.7950.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
      <?rfc include="reference.RFC.8341.xml"?>
      <?rfc include="reference.RFC.8422.xml"?>
      <?rfc include="reference.RFC.8442.xml"?>
      <?rfc include="reference.RFC.8446.xml"?>
      <?rfc include="reference.RFC.8492.xml"?>
      <?rfc include="reference.RFC.8998.xml"?>
      <?rfc include="reference.RFC.9150.xml"?>
      <?rfc include="reference.RFC.9189.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.2818.xml"?>
      <?rfc include="reference.RFC.2246.xml"?>
      <?rfc include="reference.RFC.3688.xml"?>
      <?rfc include="reference.RFC.4346.xml"?>
      <?rfc include="reference.RFC.5246.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.8040.xml"?>
      <?rfc include="reference.RFC.8071.xml"?>
      <?rfc include="reference.RFC.8340.xml"?>
      <?rfc include="reference.RFC.8342.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-tls-external-psk-importer.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-tls-external-psk-guidance.xml"/>

      <reference anchor="IANA-CIPHER-ALGS" target="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4">
        <front>
          <title>IANA "TLS Cipher Suites" Sub-registry of the "Transport Layer Security (TLS) Parameters" Registry</title>
          <author fullname="Internet Assigned Numbers Authority (IANA)"/>
        </front>
      </reference>

    </references>

    <section title='YANG Modules for IANA'>
      <t>The module contained in this section was generated by scripts using the contents of the
        associated sub-registry as they existed on June 16th, 2022.</t>

      <section title='Initial Module for the "TLS Cipher Suites" Registry' anchor="iana-tls-csa-module">
        <section title="Data Model Overview">
          <t>This section provides an overview of the "iana-tls-cipher-suite-algs" module
            in terms of its identities and protocol-accessible nodes.</t>
          <section title="Identities" toc="exclude">
            <t>The following diagram lists the base "identity" statements defined in the
              module, of which there is just one, and illustrates that all the derived identity
              statements are generated from the associated IANA-maintained registry
              <xref target="IANA-CIPHER-ALGS"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
Identities:
  +-- cipher-suite-alg-base
    +-- <identity-name from IANA registry>
]]></artwork>
              </figure>
            </t>
            <!--<aside>-->
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            <!--</aside>-->
          </section>
          <section title="Typedefs" toc="exclude">
            <t>The following diagram illustrates the "typedef" statements
              defined in the "iana-tls-cipher-suite-algs" module:</t>
            <t>
              <figure>
               <artwork><![CDATA[
Typedefs:
  identityref
    +-- cipher-suite-algorithm-ref
]]></artwork>
              </figure>
            </t>
            <!--<aside>-->
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            <!--</aside>-->
            <t>Comments:</t>
            <ul>
              <li>The typedef defined in the "iana-tls-cipher-suite-algs" module
                extends the "identityref" type defined in <xref target="RFC7950"/>.</li>
            </ul>
          </section>
          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "iana-tls-cipher-suite-alg"
              module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/iana-tls-cipher-suite-algs-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
            </ul>
          </section>
        </section>
        <section title="Example Usage">
          <t>The following example illustrates operational state data indicating
            the TLS cipher suite algorithms supported by the server:
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-cipher-suite-algs.xml)
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="YANG Module">
          <t>Following are the complete contents to the initial IANA-maintained YANG module.
            Please note that the date "2022-06-16" reflects the day on which the extraction
            occurred.</t>
          <t>This YANG module has normative references to <xref target="RFC2712"/>,
          <xref target="RFC4162"/>, <xref target="RFC4279"/>, <xref target="RFC4346"/>,
          <xref target="RFC4785"/>, <xref target="RFC5054"/>, <xref target="RFC5246"/>,
          <xref target="RFC5288"/>, <xref target="RFC5289"/>, <xref target="RFC5469"/>,
          <xref target="RFC5487"/>, <xref target="RFC5489"/>, <xref target="RFC5746"/>,
          <xref target="RFC5932"/>, <xref target="RFC6209"/>, <xref target="RFC6367"/>,
          <xref target="RFC6655"/>, <xref target="RFC7251"/>, <xref target="RFC7507"/>,
          <xref target="RFC7905"/>, <xref target="RFC8422"/>, <xref target="RFC8442"/>,
          <xref target="RFC8446"/>, <xref target="RFC8492"/>, <xref target="RFC8998"/>,
          <xref target="RFC9150"/>, <xref target="RFC9189"/>, and <xref target="RFC8340"/>.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "iana-tls-cipher-suite-algs@2022-06-16.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(iana-tls-cipher-suite-algs@2022-06-16.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>
    </section>

    <section title="Change Log" removeInRFC="true" anchor="change-log">
      <section title="00 to 01">
        <t><list style="symbols">
          <t>Noted that '0.0.0.0' and '::' might have special meanings.</t>
          <t>Renamed "keychain" to "keystore".</t>
        </list></t>
      </section>
      <section title="01 to 02">
        <t><list style="symbols">
          <t>Removed the groupings containing transport-level configuration.
          Now modules contain only the transport-independent groupings.</t>
          <t>Filled in previously incomplete 'ietf-tls-client' module.</t>
          <t>Added cipher suites for various algorithms into new
          'ietf-tls-common' module.</t>
        </list></t>
      </section>
      <section title="02 to 03">
        <t><list style="symbols">
          <t>Added a 'must' statement to container 'server-auth' asserting
          that at least one of the various auth mechanisms must be
          specified.</t>
          <t>Fixed description statement for leaf 'trusted-ca-certs'.</t>
        </list></t>
      </section>
      <section title="03 to 04">
        <t><list style="symbols">
            <t>Updated title to "YANG Groupings for TLS Clients and TLS
            Servers"</t>
            <t>Updated leafref paths to point to new keystore path</t>
            <t>Changed the YANG prefix for ietf-tls-common from 'tlscom' to
            'tlscmn'.</t>
            <t>Added TLS protocol verions 1.0 and 1.1.</t>
            <t>Made author lists consistent</t>
            <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
            <t>Updated YANG to use typedefs around leafrefs to common keystore
            paths</t>
            <t>Now inlines key and certificates (no longer a leafref to
            keystore)</t>
          </list></t>
      </section>
      <section title="04 to 05">
        <t><list style="symbols">
            <t>Merged changes from co-author.</t>
          </list></t>
      </section>
      <section title="05 to 06">
        <t><list style="symbols">
            <t>Updated to use trust anchors from trust-anchors draft (was
            keystore draft)</t>

            <t>Now Uses new keystore grouping enabling asymmetric key to be
            either locally defined or a reference to the keystore.</t>
          </list></t>
      </section>
      <section title="06 to 07">
        <t><list style="symbols">
            <t>factored the tls-[client|server]-groupings into more reusable
            groupings.</t>

            <t>added if-feature statements for the new "x509-certificates"
            feature defined in draft-ietf-netconf-trust-anchors.</t>
          </list></t>
      </section>
      <section title="07 to 08">
        <t>
          <list style="symbols">
            <t>Added a number of compatibility matrices to Section 5 (thanks Frank!)</t>
            <t>Clarified that any configured "cipher-suite" values need to be 
               compatible with the configured private key.</t>
          </list>
        </t>
      </section>
      <section title="08 to 09">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect update to groupings defined in the keystore draft.</t>
            <t>Add TLS keepalives features and groupings.</t>
            <t>Prefixed top-level TLS grouping nodes with 'tls-' and support mashups.</t>
            <t>Updated copyright date, boilerplate template, affiliation, and folding algorithm.</t>
          </list>
        </t>
      </section>
      <section title="09 to 10">
        <t>
          <list style="symbols">
            <t>Reformatted the YANG modules.</t>
          </list>
        </t>
      </section>
      <section title="10 to 11">
        <t>
          <list style="symbols">
            <t>Collapsed all the inner groupings into the top-level grouping.</t>
            <t>Added a top-level "demux container" inside the top-level grouping.</t>
            <t>Added NACM statements and updated the Security Considerations section.</t>
            <t>Added "presence" statements on the "keepalive" containers, as was 
              needed to address a validation error that appeared after adding the 
              "must" statements into the NETCONF/RESTCONF client/server modules.</t>
            <t>Updated the boilerplate text in module-level "description" statement
              to match copyeditor convention.</t>
          </list>
        </t>
      </section>
      <section title="11 to 12">
        <t>
          <list style="symbols">
            <t>In server model, made 'client-authentication' a 'presence' node
              indicating that the server supports client authentication.</t>
            <t>In the server model, added a 'required-or-optional' choice to
              'client-authentication' to better support protocols such as
              RESTCONF.</t>
            <t>In the server model, added a 'local-or-external' choice to
              'client-authentication' to better support consuming data models
              that prefer to keep client auth with client definitions than in
              a model principally concerned with the "transport".</t>
            <t>In both models, removed the "demux containers", floating the
              nacm:default-deny-write to each descendant node, and
              adding a note to model designers regarding the potential
              need to add their own demux containers.</t>
            <t>Fixed a couple references (section 2 --> section 3)</t>
          </list>
        </t>
      </section>
      <section title="12 to 13">
        <t>
          <list style="symbols">
            <t>Updated to reflect changes in trust-anchors drafts
              (e.g., s/trust-anchors/truststore/g + s/pinned.//)</t>
          </list>
        </t>
      </section>
      <section title="12 to 13">
        <t>
          <list style="symbols">
            <t>Removed 'container' under 'client-identity' to match server model.</t>
            <t>Updated examples to reflect change grouping in keystore module.</t>
          </list>
        </t>
      </section>
      <section title="13 to 14">
        <t>
          <list style="symbols">
            <t>Removed the "certificate" container from "client-identity" in the ietf-tls-client module.</t>
            <t>Updated examples to reflect ietf-crypto-types change
              (e.g., identities --&gt; enumerations)</t>
          </list>
        </t>
      </section>
      <section title="14 to 15">
        <t>
          <list style="symbols">
            <t>Updated "server-authentication" and "client-authentication" nodes from
              being a leaf of type "ts:certificates-ref" to a container that uses 
              "ts:local-or-truststore-certs-grouping".</t>
          </list>
        </t>
      </section>
      <section title="15 to 16">
        <t>
          <list style="symbols">
            <t>Removed unnecessary if-feature statements in the -client and -server modules.</t>
            <t>Cleaned up some description statements in the -client and -server modules.</t>
            <t>Fixed a canonical ordering issue in ietf-tls-common detected by new pyang.</t>
          </list>
        </t>
      </section>
      <section title="16 to 17">
        <t>
          <list style="symbols">
            <t>Removed choice local-or-external by removing the 'external' case and flattening
              the 'local' case and adding a "client-auth-supported" feature.</t>
            <t>Removed choice required-or-optional.</t>
            <t>Updated examples to include the "*-key-format" nodes.</t>
            <t>Augmented-in "must" expressions ensuring that locally-defined public-key-format
              are "ct:tls-public-key-format" (must expr for ref'ed keys are TBD).</t>
          </list>
        </t>
      </section>
      <section title="17 to 18">
        <t>
          <list style="symbols">
            <t>Removed the unused "external-client-auth-supported" feature.</t>
            <t>Made client-indentity optional, as there may be over-the-top auth instead.</t>
            <t>Added augment to uses of local-or-keystore-symmetric-key-grouping for a psk "id" node.</t>
            <t>Added missing presence container "psks" to ietf-tls-server's "client-authentication" container.</t>
            <t>Updated examples to reflect new "bag" addition to truststore.</t>
            <t>Removed feature-limited caseless 'case' statements to improve tree diagram rendering.</t>
            <t>Refined truststore/keystore groupings to ensure the key formats "must" be particular values.</t>
            <t>Switched to using truststore's new "public-key" bag (instead of separate "ssh-public-key"
              and "raw-public-key" bags).</t>
            <t>Updated client/server examples to cover ALL cases (local/ref x cert/raw-key/psk).</t>
          </list>
        </t>
      </section>
      <section title="18 to 19">
        <t>
          <list style="symbols">
            <t>Updated the "keepalives" containers in part to address Michal Vasko's request to
              align with RFC 8071, and in part to better align to RFC 6520.</t>
            <t>Removed algorithm-mapping tables from the "TLS Common Model" section</t>
            <t>Removed the 'algorithm' node from the examples.</t>
            <t>Renamed both "client-certs" and "server-certs" to "ee-certs"</t>
            <t>Added a "Note to Reviewers" note to first page.</t>
          </list>
        </t>
      </section>
      <section title="19 to 20">
        <t>
          <list style="symbols">
            <t>Modified the 'must' expression in the "ietf-tls-client:server-authention" node to 
              cover the "raw-public-keys" and "psks" nodes also.</t>
            <t>Added a "must 'ca-certs or ee-certs or raw-public-keys or psks'" statement to the
              ietf-tls-server:client-authentication" node.</t>
            <t>Added "mandatory true" to "choice auth-type" and a "presence" statement to its ancestor.</t>
            <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
            <t>Moved the "ietf-tls-common" module section to proceed the other two module sections.</t>
            <t>Updated the Security Considerations section.</t>
          </list>
        </t>
      </section>
      <section title="20 to 21">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect new "cleartext-" prefix in the crypto-types draft.</t>
          </list>
        </t>
      </section>
      <section title="21 to 22">
        <t>
          <list style="symbols">
            <t>In both the "client-authentication" and "server-authentication" subtrees,
              replaced the "psks" node from being a P-container to a leaf of type "empty".</t>
            <t>Cleaned up examples (e.g., removed FIXMEs)</t>
            <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
            <t>Updated the "psk" sections in the "ietf-tls-client" and "ietf-tls-server"
              modules to more correctly reflect RFC 4279.</t>
          </list>
        </t>
      </section>
      <section title="22 to 23">
        <t>
          <list style="symbols">
            <t>Addressed comments raised by YANG Doctor in the ct/ts/ks drafts.</t>
          </list>
        </t>
      </section>
      <section title="23 to 24">
        <t>
          <list style="symbols">
            <t>Added missing reference to "FIPS PUB 180-4".</t>
            <t>Added identity "tls-1.3" and updated description statement in other identities indicating that the protocol version is obsolete and enabling the feature is NOT RECOMMENDED.</t>
            <t>Added XML-comment above examples explaining the reason for the unexpected top-most element's presence.</t>
            <t>Added missing "client-ident-raw-public-key" and "client-ident-psk" featutes.</t>
            <t>Aligned modules with `pyang -f` formatting.</t>
            <t>Fixed nits found by YANG Doctor reviews.</t>
            <t>Added a 'Contributors' section.</t>
          </list>
        </t>
      </section>
      <section title="24 to 25">
        <t>
          <list style="symbols">
            <t>Added TLS 1.3 references.</t>
            <t>Clarified support for various TLS protocol versions.</t>
            <t>Moved algorithms in ietf-tls-common (plus more) to IANA-maintained modules</t>
            <t>Added "config false" lists for algorithms supported by the server.</t>
            <t>Fixed issues found during YANG Doctor review.</t>
          </list>
        </t>
      </section>
      <section title="25 to 26">
        <t>
          <list style="symbols">
            <t>Replaced "base64encodedvalue==" with "BASE64VALUE=" in examples.</t>
            <t>Minor editorial nits</t>
          </list>
        </t>
      </section>
      <section title="26 to 27">
        <t>
          <list style="symbols">
            <t>Fixed up the 'WG Web' and 'WG List' lines in YANG module(s)</t>
            <t>Fixed up copyright (i.e., s/Simplified/Revised/) in YANG module(s)</t>
            <t>Created identityref-based typedef for the IANA alg identity base.</t>
            <t>Major update to support TLS 1.3.</t>
          </list>
        </t>
      </section>
      <section title="27 to 28">
        <t>
          <list style="symbols">
            <t>Fixed draft text to refer to new "identity" values (e.g., s/tls-1.3/tls13).</t>
            <t>Added ietf-tls-common:generate-public-key() RPC.</t>
          </list>
        </t>
      </section>
      <section title="28 to 29">
        <t>
          <list style="symbols">
            <t>Updated modules to IANA-maintained module in Appendix A to 2022-06-16.</t>
          </list>
        </t>
      </section>
      <section title="29 to 30">
        <t>
          <list style="symbols">
            <t>Fixed 'must' expressions.</t>
            <t>Added missing 'revision' statement.</t>
          </list>
        </t>
      </section>
      <section title="30 to 31">
        <t>
          <list style="symbols">
            <t>Updated per Shepherd reviews impacting the suite of drafts.</t>
          </list>
        </t>
      </section>
      <section title="31 to 32">
        <t>
          <list style="symbols">
            <t>Updated per Shepherd reviews impacting the suite of drafts.</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Acknowledgements" numbered="no">
      <t>The authors would like to thank for following for lively discussions
        on list and in the halls (ordered by first name):
        Alan Luchuk,
        Andy Bierman,
        Balázs Kovács,
        Benoit Claise,
        Bert Wijnen,
        David Lamparter,
        Dhruv Dhody,
        Gary Wu,
        Henk Birkholz,
        Jeff Hartley,
        Juergen Schoenwaelder,
        Ladislav Lhotka,
        Liang Xia,
        Martin Björklund,
        Mehmet Ersue,
        Michal Vaško,
        Phil Shafer,
        Radek Krejci,
        Sean Turner,
        and Tom Petch.</t>
    </section>
        
    <section title="Contributors" numbered="no">
      <t>Special acknowledgement goes to Gary Wu who contributed the
        "ietf-tls-common" module, and Tom Petch who carefully ensured
        that references were set correctly throughout.</t>
    </section>
  </back>
</rfc>
